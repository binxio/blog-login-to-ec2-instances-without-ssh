#
# Copyright 2019 - binx.io B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  InstanceType:
    Type: String
    Default: t3.nano

Resources:
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      SubnetId: !Select [0, !Ref Subnets]
      SecurityGroupIds: !Ref SecurityGroups
      Tags:
      - Key: Name
        Value: blog-aws-session-manager
      IamInstanceProfile: !Ref IamInstanceProfile

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  SessionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

  SessionLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: StandardRule
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 1

  SessionManagerPreferences:
    Type: Custom::SSMDocument
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'SSM-SessionManagerRunShell']]
      DocumentType: Session
      Content: !Sub >
        { "schemaVersion": "1.0",
          "description": "Session Manager Preferences",
          "sessionType": "Standard_Stream",
          "inputs": { 
            "s3BucketName": "${SessionLogBucket}", 
            "s3KeyPrefix": "", 
            "s3EncryptionEnabled": false,
            "cloudWatchLogGroupName": "${SessionLogGroup}",
            "cloudWatchEncryptionEnabled": false 
          }
        }
      ServiceToken: !GetAtt SSMDocumentProvider.Arn

  SSMDocumentProvider:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Timeout: 30
      Role: !GetAtt 'SSMDocumentProviderRole.Arn'
      Runtime: python3.6

      Code:
        ZipFile: |+
          import json
          import boto3
          import logging
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          ssm = boto3.client('ssm')


          def handler(event, context):
              kwargs = event['ResourceProperties'].copy()

              if 'ServiceToken' in kwargs:
                  del kwargs['ServiceToken']

              if kwargs.get( 'DocumentFormat', 'JSON') and isinstance(kwargs.get('Content'), dict):
                  kwargs['Content'] = json.dumps(kwargs['Content'])

              logging.info('content => %s', kwargs['Content'])

              try:
                  if event['RequestType'] == 'Create':
                      response = ssm.create_document(**kwargs)
                  elif event['RequestType'] == 'Update':
                      kwargs.pop('DocumentType')
                      kwargs['DocumentVersion'] = '$LATEST'
                      try:
                          response = ssm.update_document(**kwargs)
                      except ssm.exceptions.DuplicateDocumentContent:
                          response = ssm.get_document(Name=kwargs['Name'])
                  elif event['RequestType'] == 'Delete':
                      response = ssm.delete_document(Name=kwargs.get('Name'))

                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, response.get('DocumentInformation', {}), kwargs.get('Name'))
              except Exception as e:
                  logger.error('%s', e)
                  if event.get('RequestType') != 'Delete':
                      return cfnresponse.send(event, context, cfnresponse.FAILED, {}, kwargs.get('Name'))
                  else:
                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, kwargs.get('Name'))

  SSMDocumentProviderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: SSMDocumentProvider
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - '*'
          - Effect: Allow
            Action:
            - ssm:CreateDocument
            - ssm:UpdateDocument
            - ssm:DeleteDocument
            Resource:
            - '*'

Outputs:
  StartSessionCommand:
    Value: !Sub 'aws ssm start-session --target ${Instance}'
  CopySessionLogBucketCommand:
    Value: !Sub 'aws s3 cp s3://${SessionLogBucket}/$SESSION_ID.log -'
  CheckCloudWatchLogCommand:
    Value: !Sub 'aws logs get-log-events --log-group-name ${SessionLogGroup} --log-stream-name $SESSION_ID'
